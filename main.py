#main.py file

import asyncio
# import logging
import os

import aiosqlite
from aiogram import Bot, Dispatcher
from bot.handlers import user_router
from bot.scheduler import setup_scheduler
from config import BOT_TOKEN, SQLITE_DB_PATH
from db.database import init_db
from bot.admin import admin_router



# logging.basicConfig(
#     level=logging.DEBUG,
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
# )
async def main():
    bot = None
    try:
        #  –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î
        await check_db_integrity()
        #  –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        await init_db()

        #  —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(admin_router)
        dp.include_router(user_router)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        setup_scheduler(bot) # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.')
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        if bot:
            await bot.session.close()


async def check_db_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î"""
    try:
        async with aiosqlite.connect(SQLITE_DB_PATH) as db:
            await db.execute('PRAGMA integrity_check')
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {e}")
        if os.path.exists(SQLITE_DB_PATH):
            os.remove(SQLITE_DB_PATH)
        await init_db()
#-------------------------------------------------------------------------------------------------------#
if __name__ == "__main__":
    asyncio.run(main())

#bot//admin.py
import aiosqlite
from aiogram import types, Router
from aiogram.filters import Command

from config import SQLITE_DB_PATH, ADMIN_ID
from core.admin_manager import AdminManager

admin_router = Router()


@admin_router.message(Command('addadmin'))
async def add_admin(message: types.Message):
	"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫"""
	if not await AdminManager.is_admin(message.from_user.id):
		return await message.answer('"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"')

	try:
		_, user_id, username = message.text.split()
		await AdminManager.add_admin(int(user_id), username)
		await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

	except:
		await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id> <username>')
#-------------------------------------------------------------------------------------------------------#

@admin_router.message(Command('broadcast'))
async def broadcast(message: types.Message):
	"""–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
	if not await AdminManager.is_admin(message.from_user.id):
		return await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')

	text = message.text.replace('/broadcast', '').strip()
	if not text:
		return await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')

	await message.answer("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
	await AdminManager.broadcast_message(message.bot, text, message.from_user.id)
	await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
#-------------------------------------------------------------------------------------------------------#

@admin_router.message(Command('admin'))
async def admin_help(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not await AdminManager.is_admin(message.from_user.id):
	    return await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ üõ†")


    text = """<b>üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
    
    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<b>/addadmin</b> [id] [username] - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
<b>/broadcast</b> [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
<b>/feedbacks</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
<b>/resolve_fb</b> [id] - –ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π

<b>üîú –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>
<b>/stats</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
<b>/ban</b> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
<b>/promo</b> - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
<b>/export</b> - –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""
    await message.answer(text, parse_mode='HTML')
#-------------------------------------------------------------------------------------------------------#

@admin_router.message(Command('feedbacks'))
async def view_feedbacks(message: types.Message):
	"""–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ñ–∏–¥–±–µ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
	if message.from_user.id != ADMIN_ID:
		return await message.answer('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')

	async with aiosqlite.connect(SQLITE_DB_PATH) as db:
		cursor = await db.execute("SELECT id, user_id, message FROM feedback WHERE status = 'new' LIMIT 10")
		feedbacks = await cursor.fetchall()

	if not feedbacks:
		return await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

	response = ['üì¨ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:\n"']
	for fb in feedbacks:
		response.append(f'ID: {fb[0]}\nUser: {fb[1]}\nMessage: {fb[2]}\n-----')

		# –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	for chunk in [response[i:i+3] for i in range(0, len(response), 3)]:
		await message.answer('\n'.join(chunk))

#–î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∏–¥–±–µ–∫–æ–≤
@admin_router.message(Command('resolve_fb'))
async def resolve_feedback(message: types.Message):
	"""–ü–æ–º–µ—Ç–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
	if message.from_user.id != ADMIN_ID:
		return

	try:
		fb_id = int(message.text.split()[1])
		async with aiosqlite.connect(SQLITE_DB_PATH) as db:
			await db.execute(
				"UPDATE feedback SET status = 'processed' WHERE id = ?",
				(fb_id,)
			)
			await db.commit()
		await message.answer(f"‚úÖ –§–∏–¥–±–µ–∫ #{fb_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
	except (IndexError, ValueError):
		await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resolve_fb <id_—Ñ–∏–¥–±–µ–∫–∞>')
#-------------------------------------------------------------------------------------------------------#

#@admin_router.message(Command("initadmin"))
async def init_admin(message: types.Message):
	"""–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞, –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å"""
	if message.from_user.id != ADMIN_ID:
		return

	await AdminManager.add_admin(ADMIN_ID, message.from_user.username, True)
	await message.answer('‚úÖ –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!')

# bot/scheduler.py file
from datetime import datetime

import aiosqlite
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import ADMIN_ID, FEEDBACK_NOTIFY_INTERVAL
from core.content_ai import generate_reply
from core.context_manager import ContextManager
from core.xp_engine import load_users, XPManager
from db.database import SQLITE_DB_PATH

scheduler = AsyncIOScheduler()

# –£—Ç—Ä–µ–Ω–Ω—è—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è
async def morning_affirmation(bot: Bot):
	print(f"‚è∞ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ {datetime.now()}")
	users = load_users()
	for user_id in users:
		user_id_int = int(user_id)

		xp = XPManager(user_id_int)
		xp.add_xp(10)

		prompt = "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –±–æ–¥—Ä—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é –º—É–∂—á–∏–Ω–µ –Ω–∞ —É—Ç—Ä–æ, –º–∞–∫—Å–∏–º—É–º 15 —Å–ª–æ–≤"
		text = await generate_reply(user_id, prompt)

		try:
			await bot.send_message(user_id_int, f'üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è:\n{text}\n+10 XP üåü')

		except Exception as e:
			print(f'[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]', e)

# –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
async def evening_reflection(bot: Bot):
	print(f"üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ {datetime.now()}")
	users = load_users()
	for user_id in users:
		try:
			await bot.send_message(int(user_id), "üåô –ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å? –ß—Ç–æ —É–¥–∞–ª–æ—Å—å, —á—Ç–æ –Ω–µ—Ç?")
		except Exception as e:
			print(f'[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]: {e}')

def setup_scheduler(bot: Bot):
	# –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
	scheduler.add_job(morning_affirmation, CronTrigger(hour=7, minute=0), kwargs={'bot': bot}, id='morning_affirmation')
	scheduler.add_job(evening_reflection, CronTrigger(hour=21, minute=0), kwargs={'bot': bot},  id='evening_reflection')
	scheduler.add_job(notify_new_feedbacks, 'interval', seconds = FEEDBACK_NOTIFY_INTERVAL, kwargs={'bot': bot})

	scheduler.add_job(check_inactive_users,'cron', day_of_week = 'mon', kwargs={'bot':bot})
	scheduler.add_job(compress_inactive_contexts, 'cron', day_of_week = 'mon')
	scheduler.start()
	print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
#-------------------------------------------------------------------------------------------------------#

async def notify_new_feedbacks(bot: Bot):
	"""–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤—ã—Ö —Ñ–∏–¥–±–µ–∫–∞—Ö"""
	async with aiosqlite.connect(SQLITE_DB_PATH) as db:
		cursor = await db.execute("SELECT COUNT(*) FROM feedback WHERE status = 'new'")
		count = (await cursor.fetchone())[0]

	if count>0:
		await bot.send_message(ADMIN_ID, f"üì≠ –£ –≤–∞—Å {count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: /feedbacks")
#-------------------------------------------------------------------------------------------------------#

async def check_inactive_users(bot: Bot):
	"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
	async with aiosqlite.connect(SQLITE_DB_PATH) as db:
		#–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ –ø—Ä–æ—è–≤–ª—è–≤—à–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 30+ –¥–Ω–µ–π
		cursor = await db.execute(
			"""SELECT user_id FROM conversation_history
			WHERE timestamp < datetime('now', '-30 days')
			GROUP BY user_id"""
		)
		inactive_users = await cursor.fetchall()

		for user_id, in inactive_users:
			try:
				await bot.send_message(user_id,  "üîî –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–π–¥–µ—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏, "
                    "–≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –±—É–¥–µ—Ç —Å–∂–∞—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
			except Exception as e:
				pass # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
#-------------------------------------------------------------------------------------------------------#

async def compress_inactive_contexts():
	"""–°–∂–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
	async with aiosqlite.connect(SQLITE_DB_PATH) as db:
		# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 37+ –¥–Ω–µ–π (30 + 7 –¥–Ω–µ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
		cursor = await db.execute(
			"""SELECT user_id FROM conversation_history
			WHERE timestamp < datetime('now', '-37 days')
			GROUP BY user_id"""
		)
		users = await cursor.fetchall()

		for user_id, in users:
			await ContextManager.compress_context(user_id)


